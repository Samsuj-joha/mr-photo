generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Gallery {
  id          String         @id @default(cuid())
  title       String
  description String?
  category    String
  images      GalleryImage[]
  featured    Boolean        @default(false)
  published   Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model GalleryImage {
  id        String  @id @default(cuid())
  url       String
  publicId  String
  alt       String?
  caption   String?
  order     Int     @default(0)
  galleryId String
  gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Portfolio {
  id          String    @id @default(cuid())
  title       String
  description String?
  client      String?
  category    String
  coverImage  String
  images      String[]
  featured    Boolean   @default(false)
  published   Boolean   @default(true)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  excerpt     String?
  coverImage  String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id        String        @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String        @db.Text
  status    ContactStatus @default(PENDING)
  createdAt DateTime      @default(now())
}

model HomeSlider {
  id          String   @id @default(cuid())
  title       String?
  description String?
  imageUrl    String
  publicId    String   // Cloudinary public ID
  alt         String?
  order       Int      @default(0)
  active      Boolean  @default(true)
  linkUrl     String?  // Optional link for the slide
  linkText    String?  // Optional link text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum ContactStatus {
  PENDING
  REPLIED
  RESOLVED
}